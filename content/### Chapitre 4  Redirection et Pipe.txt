### Chapitre 4 : Redirection et Pipes

#### **4.1 Introduction**

La redirection et les pipes sont des fonctionnalités puissantes du shell Linux qui permettent de contrôler le flux des données entre les commandes et les fichiers. Elles sont essentielles pour automatiser des tâches et manipuler les données de manière efficace.

#### **4.2 Redirection de la Sortie**

1. **Redirection de la sortie standard (`>`)**
   - **Syntaxe** : `commande > fichier`
   - **Description** : Redirige la sortie d'une commande vers un fichier. Si le fichier existe, il sera écrasé.
   - **Exemple** :
     ```bash
     ls > liste_fichiers.txt    # Redirige la sortie de la commande `ls` vers le fichier "liste_fichiers.txt"
     ```

2. **Ajout à la sortie standard (`>>`)**
   - **Syntaxe** : `commande >> fichier`
   - **Description** : Redirige la sortie d'une commande vers un fichier. Si le fichier existe, la sortie sera ajoutée à la fin du fichier.
   - **Exemple** :
     ```bash
     echo "Nouveau fichier" >> liste_fichiers.txt    # Ajoute "Nouveau fichier" à la fin de "liste_fichiers.txt"
     ```

#### **4.3 Redirection de l'Entrée**

1. **Redirection de l'entrée standard (`<`)**
   - **Syntaxe** : `commande < fichier`
   - **Description** : Utilise le contenu d'un fichier comme entrée pour une commande.
   - **Exemple** :
     ```bash
     sort < liste_fichiers.txt    # Trie les lignes du fichier "liste_fichiers.txt"
     ```

#### **4.4 Redirection des Erreurs**

1. **Redirection de la sortie d'erreur (`2>`)**
   - **Syntaxe** : `commande 2> fichier`
   - **Description** : Redirige les messages d'erreur d'une commande vers un fichier.
   - **Exemple** :
     ```bash
     ls /non_existant 2> erreurs.txt    # Redirige les erreurs de la commande `ls` vers le fichier "erreurs.txt"
     ```

2. **Redirection de la sortie standard et des erreurs (`&>`)**
   - **Syntaxe** : `commande &> fichier`
   - **Description** : Redirige à la fois la sortie standard et les messages d'erreur vers un fichier.
   - **Exemple** :
     ```bash
     ls /non_existant &> sortie_et_erreurs.txt    # Redirige la sortie et les erreurs vers "sortie_et_erreurs.txt"
     ```

#### **4.5 Utilisation des Pipes**

1. **Pipes (`|`)**
   - **Syntaxe** : `commande1 | commande2`
   - **Description** : Utilise la sortie de `commande1` comme entrée pour `commande2`.
   - **Exemples** :
     ```bash
     ls -l | grep "mon_fichier"    # Filtre la sortie de `ls -l` pour ne montrer que les lignes contenant "mon_fichier"
     ```

2. **Chaînage de plusieurs commandes**
   - **Syntaxe** : `commande1 | commande2 | commande3`
   - **Description** : Permet de chaîner plusieurs commandes ensemble.
   - **Exemple** :
     ```bash
     cat fichier.txt | sort | uniq -c | sort -nr    # Trie les lignes de "fichier.txt", compte les occurrences uniques, et trie par ordre décroissant
     ```

#### **4.6 Exemples Pratiques**

1. **Redirection de la sortie et des erreurs**
   - **Exemple** :
     ```bash
     find / -name "mon_fichier.txt" > resultats.txt 2> erreurs.txt    # Redirige la sortie vers "resultats.txt" et les erreurs vers "erreurs.txt"
     ```

2. **Utilisation de pipes pour traiter des données**
   - **Exemple** :
     ```bash
     ps aux | grep "firefox" | awk '{print $2}' | xargs kill -9    # Trouve et tue tous les processus Firefox
     ```

#### **4.7 Conclusion**

La redirection et les pipes sont des outils essentiels pour manipuler les flux de données dans le shell Linux. En maîtrisant ces techniques, vous pouvez automatiser des tâches complexes et traiter les données de manière efficace.

---

Ce chapitre vous donne une introduction complète à la redirection et aux pipes sous Linux. Les chapitres suivants approfondiront ces concepts et introduiront des commandes et techniques plus avancées. Si vous avez des questions ou besoin de clarifications, n'hésitez pas à demander !